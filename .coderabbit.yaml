language: "ko-KR"
early_access: false
reviews:
  profile: "chill"
  request_changes_workflow: true
  high_level_summary: true
  poem: false
  review_status: true
  collapse_walkthrough: false
  auto_review:
    enabled: true
    drafts: false
  allowed_base_branches:
    - "*" # 모든 브랜치에서 PR 리뷰
chat:
  auto_reply: true
reviews:
  instructions: |
    우리 팀은 다음의 코드 스타일 가이드를 따릅니다:
    - 공통 컴포넌트는 최상위 폴더 아래의 components 폴더에 , 특정 페이지에서만 사용되는 컴포넌트라면 해당 라우트 폴더 바로 아래에 components폴더 생성 후 컴포넌트 생성
    - 상수만 대문자, 일반 변수는 카멜케이스로 사용한다
    - 타입은 types 폴더에 저장한다
    - 임시데이터는 mockData 폴더에 저장한다.
    - 가능한 경우 early return을 사용해 가독성을 높인다.
    - 변수, 함수/상수 이름은 의미가 분명하도록 짓는다. 이벤트 핸들러는 handleClick(onClick), handleKeyDown(onKeyDown)처럼 handle 접두사를 사용한다.
    - HTML 요소 스타일링은 항상 Tailwind 클래스만 사용하고, 별도의 CSS 파일이나 인라인 태그 스타일은 지양한다.
    - 요소에 접근성 속성을 구현한다. 예: 포커스 가능한 태그에는 tabindex="0", aria-label, on:click, on:keydown 등 적절한 속성을 포함한다.
    - 함수는 가능하면 화살표 함수 상수로 선언한다. 예: const toggle = () => { ... } (타입 정의 가능 시 명시적 타입을 함께 선언).
    - 함수형/선언형 패턴을 지향하고 class 기반 구현은 지양한다.
    - 중복 코드보다 반복(이터레이션)과 모듈화를 선호한다.
    - 보조 동사 형태의 서술적인 변수명을 사용한다. 예: isLoading, hasError.
    - 디렉터리명은 소문자-케밥케이스를 사용한다. 예: components/auth-wizard
    - 컴포넌트는 named export 사용을 선호한다
    - 순수 함수는 function 키워드로 선언한다.
    - 조건문에서 불필요한 중괄호를 피하고, 단순 구문은 간결한 문법을 사용한다.
    - 선언적 JSX 스타일을 유지한다.
    - 모든 코드에 TypeScript를 사용하고, type보다 interface를 우선한다.
    - enum은 지양하고, 맵/레코드로 대체한다.
    - 컴포넌트는 함수형 컴포넌트 + TypeScript 인터페이스 조합을 사용한다.
